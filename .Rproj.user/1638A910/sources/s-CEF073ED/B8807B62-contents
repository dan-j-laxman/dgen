---
title: "R Notebook"
output: html_notebook
---

```{r}
library(tidyverse)
```


# Creating Sample Data

```{r}
# Continuous predictors with and without missing data

# c1  <- runif(10)
# c2  <- runif(10)
# c3  <- runif(10)
# 
# cm1 <- runif(10)
#   cm1[sample.int(length(cm1), 10)] <- NA_real_
# cm2 <- runif(10)
#   cm2[sample.int(length(cm2), 10)] <- NA_real_
# cm3 <- runif(10)
#   cm3[sample.int(length(cm3), 10)] <- NA_real_

# Likert predictors with and without missing data
  
# l1 <- sample(c(1,2,3,4,5,6,7), 1000, replace = TRUE)
# l2 <- sample(c(1,2,3,4,5,6,7), 1000, replace = TRUE)
# l3 <- sample(c(1,2,3,4,5,6,7), 1000, replace = TRUE)
# 
# lm1 <- sample(c(1,2,3,4,5,6,7, NA), 1000, replace = TRUE)
# lm2 <- sample(c(1,2,3,4,5,6,7, NA), 1000, replace = TRUE)
# lm3 <- sample(c(1,2,3,4,5,6,7, NA), 1000, replace = TRUE)


# Binary predictors with and without missing data  

# b1  <- factor(sample(c(0,1), 10, replace=TRUE))
# b2  <- factor(sample(c(0,1), 10, replace=TRUE))
# b3  <- factor(sample(c(0,1), 10, replace=TRUE))
# 
# bm1  <- factor(sample(c(0,1, NA), 10, replace=TRUE))
# bm2  <- factor(sample(c(0,1, NA), 10, replace=TRUE))
# bm3  <- factor(sample(c(0,1, NA), 10, replace=TRUE))

# Nominal predictors with and without missing data

# n1  <- factor(sample(c("cat", "dog", "mouse"), 10, replace=TRUE))
# n2  <- factor(sample(c("cat", "dog", "mouse"), 10, replace=TRUE))
# n3  <- factor(sample(c("cat", "dog", "mouse"), 10, replace=TRUE))
# 
# nm1  <- factor(sample(c("cat", "dog", "mouse", NA), 10, replace=TRUE))
# nm2  <- factor(sample(c("cat", "dog", "mouse", NA), 10, replace=TRUE))
# nm3  <- factor(sample(c("cat", "dog", "mouse", NA), 10, replace=TRUE))

# Character variables with and without missing data

# ch1  <- sample(c("rock", "paper", "scissors"), 10, replace=TRUE)
# ch1  <- as.character(ch1)
# ch2  <- sample(c("rock", "paper", "scissors"), 10, replace=TRUE)
# ch3  <- sample(c("rock", "paper", "scissors"), 10, replace=TRUE)
# 
# chm1  <- sample(c("rock", "paper", "scissors", NA), 10, replace=TRUE)
# chm2  <- sample(c("rock", "paper", "scissors", NA), 10, replace=TRUE)
# chm3  <- sample(c("rock", "paper", "scissors", NA), 10, replace=TRUE)


```



# Categorical Variables

## Dropping Unused Levels

```{r}
df <- data.frame(name = c("a", "a", "a", "b", "b", "c", "c", "c", "c"), 
                 x = 1:9,
                 z = c(3,4,6,2,3,4,6,7,8))

aa = df %>%
    dplyr::group_by(name) %>%
    dplyr::filter(n() < 4)

aa %>% 
  dplyr::ungroup() %>% 
  furniture::tableF(name)

aa %>% 
  dplyr::ungroup() %>% 
  droplevels() %>% 
  furniture::tableF(name)
```

## Reordering Factors by Another Variable
```{r}



iris %>%
  dplyr::group_by(Species) %>% 
  dplyr::summarize(mSepal.Width = mean(Sepal.Width)) %>% 
  ggplot() +
  aes(Species, mSepal.Width, color = Species) +
  geom_point()

iris %>%
  dplyr::group_by(Species) %>% 
  dplyr::summarize(mSepal.Width = mean(Sepal.Width)) %>% 
    mutate(Species = fct_reorder(Species, mSepal.Width)) %>%
    ggplot() +
    aes(Species, mSepal.Width, color = Species) +
    geom_point()
  
```


# From continuous to categorical

https://www.r-bloggers.com/from-continuous-to-categorical/

```{r}

```


# case_when

https://stackoverflow.com/questions/44893933/r-avoiding-type-conflicts-with-dplyrcase-when


```{r}

```



```{r}
# Function

sum_n =  function(..., n){
  
    x = ifelse(sum(is.na(c(...))) <= n,
             sum(..., na.rm = TRUE),
             NA) 

    return(x)
    
}

count_na =  function(..., n){
  
      x = sum(is.na(c(...)))

    return(x)
  
}


```




dplyr::select will reorder vars in data frame

model.matrix( ~ ., X) creates a matrix of variables for a model.
Right of "~" indicates predictors. "." indicates all vars. X is a list of vars.
Could create using a df
X = df %>% 
    select() %>% 
    data.frame
    
    
* The following code will "wash" the data in columns 36 - 40, replacing it.
df[,36:40] = lapply(df[, 36:40], washer, is.nan)

  **  The use of brackets ("df[,36:40]") keeps the output as a data frame instead of a list.

* In contrast, the following will produce df2 with only rows 36: 40 (TEST THIS!)
df2 = lapply(df[, 36:40], washer, is.nan)



myfunc = function(x){paste0(quantile(x)[1], " ,", quantile(x)[2])

}


lapply(df, myfunc)
table(df, vars, FUN = myfunc)

