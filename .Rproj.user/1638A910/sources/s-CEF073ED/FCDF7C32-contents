---
title: "R Notebook"
output: html_notebook
---

## Setup
```{r}
library(tidyverse)
devtools::install_github("dan-j-laxman/dgen", force = TRUE)
library(dgen)
```

# Overview of dgen

* dgen, or dplyr generator, is intended to be used within the dplyr::mutate command to generate a new variable that is a combination of other variables.

# dgen functions

## dgen::row_any_count(..., values, maxmiss_n = 0)

  * For each row, returns the count of variables in the variable list (...) equal to a specified value or values. Includes options for handling missing data.

## dgen::row_greater_count(..., value, maxmiss_n = 0)

  * For each row, returns the count of variables in the variable list (...) with values greater than a specified value. Includes options for handling missing data.
  
## dgen::row_less_count(..., value, maxmiss_n = 0)

  * For each row, returns the count of variables in the variable list (...) with values less than a specified value. Includes options for handling missing data.
    
## dgen::row_any_match(..., values, maxmiss_n = 0)

  * Checks whether the value of any variable in a variable list matches a specified value or values. Returns a value of 1 if at least one variable in the variable list (...) is equal to a specified value or values; 0 or NA otherwise. Includes options for handling missing data.

## dgen::row_nmiss(...)

  * Counts the number of missing values within each row.
    
## dgen::row_nvalid(...)

  * Counts the number of non-missing values within each row.

## dgen::row_mean(..., maxmiss_n = 0)

  * Calculates the average value across variables within each row. Includes an option for handling missing data.

## dgen::row_sum(..., maxmiss_n = 0)

  * Calculates sum across variables within each row. Includes an option for handling missing data.


# Testing of dgen



## Sample Dataset

```{r}
# Continuous Outcome
y  <- rnorm(10)

# Continuous predictors with and without missing data

# c1  <- runif(10)
# c2  <- runif(10)
# c3  <- runif(10)
# 
# cm1 <- runif(10)
#   cm1[sample.int(length(cm1), 10)] <- NA_real_
# cm2 <- runif(10)
#   cm2[sample.int(length(cm2), 10)] <- NA_real_
# cm3 <- runif(10)
#   cm3[sample.int(length(cm3), 10)] <- NA_real_

c1 <- c(0.0, 0.0, 7.3, 4.7, 3.2, 4.5, 3.6, 4.8, 7.9, 2.4)
c2 <- c(0.0, 0.0, 0.0, 5.3, 0.0, 0.0, 3.7, 5.2, 7.6, 6.9)
c3 <- c(0.0, 2.7, 3.5, 5.6, 4.5, 0.0, 0.0, 4.3, 6.2, 3.5)

cm1 <- c(0.0, 0.0, 7.3, 4.7,  NA,  NA,  NA, NA,  NA,  NA)
cm2 <- c(0.0, 0.0, 0.0, 5.3, 0.0, 0.0,  NA, NA, 7.6,  NA)
cm3 <- c(0.0, 2.7, 3.5, 5.6, 4.5, 0.0, 0.0, NA, 6.2, 3.5)
    
# Likert predictors with and without missing data
  
# l1 <- sample(c(1,2,3,4,5,6,7), 1000, replace = TRUE)
# l2 <- sample(c(1,2,3,4,5,6,7), 1000, replace = TRUE)
# l3 <- sample(c(1,2,3,4,5,6,7), 1000, replace = TRUE)
# 
# lm1 <- sample(c(1,2,3,4,5,6,7, NA), 1000, replace = TRUE)
# lm2 <- sample(c(1,2,3,4,5,6,7, NA), 1000, replace = TRUE)
# lm3 <- sample(c(1,2,3,4,5,6,7, NA), 1000, replace = TRUE)


l1 <- c(1, 1, 7, 4, 3, 4, 3, 4, 7, 2)
l2 <- c(1, 1, 1, 5, 1, 1, 3, 5, 7, 6)
l3 <- c(1, 2, 3, 5, 4, 1, 1, 4, 6, 3)

lm1 <- c(1, 1, 7, 4, NA, NA, NA, NA, NA, NA)
lm2 <- c(1, 1, 1, 5, 1,  1,  NA, NA, 7,  NA)
lm3 <- c(1, 2, 3, 5, 4,  1,  1,  NA, 6,  3)
  
    
# Binary predictors with and without missing data  

# b1  <- factor(sample(c(0,1), 10, replace=TRUE))
# b2  <- factor(sample(c(0,1), 10, replace=TRUE))
# b3  <- factor(sample(c(0,1), 10, replace=TRUE))
# 
# bm1  <- factor(sample(c(0,1, NA), 10, replace=TRUE))
# bm2  <- factor(sample(c(0,1, NA), 10, replace=TRUE))
# bm3  <- factor(sample(c(0,1, NA), 10, replace=TRUE))

b1 <- c(0,  1,  1,  0,  1,  0,  1,  0,  0,  1 )
b2 <- c(1,  1,  0,  1,  1,  1,  1,  0,  1,  1 )
b3 <- c(1,  0,  1,  1,  0,  0,  1,  0,  0,  1 )

bm1 <- c(NA, NA, NA,  0,   1,  0,  1,  0,  0,  1 )
bm2 <- c(1 , NA, NA,  1,   1, NA,  1,  0,  1,  1 )
bm3 <- c(1 ,  0, NA,  1,  NA,  0,  1,  0, NA,  1 )


# Nominal predictors with and without missing data

# n1  <- factor(sample(c("cat", "dog", "mouse"), 10, replace=TRUE))
# n2  <- factor(sample(c("cat", "dog", "mouse"), 10, replace=TRUE))
# n3  <- factor(sample(c("cat", "dog", "mouse"), 10, replace=TRUE))
# 
# nm1  <- factor(sample(c("cat", "dog", "mouse", NA), 10, replace=TRUE))
# nm2  <- factor(sample(c("cat", "dog", "mouse", NA), 10, replace=TRUE))
# nm3  <- factor(sample(c("cat", "dog", "mouse", NA), 10, replace=TRUE))


n1 <- c("cat",  "cat",   "dog",   "dog", "mouse",
         "dog", "mouse", "dog",   "dog", "mouse")
n2 <- c("cat",  "cat",   "cat",   "dog", "cat",
         "cat", "mouse", "mouse", "dog", "mouse")
n3 <- c("cat",  "dog",   "mouse", "dog", "mouse",
         "cat", "cat",   "mouse", "dog", "mouse")

nm1 <- c("cat", "cat", "dog",   "dog", NA,
         NA,    NA,    NA,      NA,    NA)
nm2 <- c("cat", "cat", "cat",   "dog", "cat",
         "cat", NA,    NA,      "dog", NA)
nm3 <- c("cat", "dog", "mouse", "dog", "mouse",
         "cat", "cat", NA,      "dog", "mouse")



# Character variables with and without missing data

# ch1  <- sample(c("rock", "paper", "scissors"), 10, replace=TRUE)
# ch1  <- as.character(ch1)
# ch2  <- sample(c("rock", "paper", "scissors"), 10, replace=TRUE)
# ch3  <- sample(c("rock", "paper", "scissors"), 10, replace=TRUE)
# 
# chm1  <- sample(c("rock", "paper", "scissors", NA), 10, replace=TRUE)
# chm2  <- sample(c("rock", "paper", "scissors", NA), 10, replace=TRUE)
# chm3  <- sample(c("rock", "paper", "scissors", NA), 10, replace=TRUE)


ch1 <- c("rock",  "rock",     "paper",    "paper", "scissors",
         "paper", "scissors", "paper",    "paper", "scissors")
ch2 <- c("rock",  "rock",     "rock",     "paper", "rock",
         "rock",  "scissors", "scissors", "paper", "scissors")
ch3 <- c("rock",  "paper",    "scissors", "paper", "scissors",
         "rock",  "rock",     "scissors", "paper", "scissors")

chm1 <- c("rock", "rock", "paper",     "paper", NA,
          NA,     NA,     NA,          NA,      NA)
chm2 <- c("rock", "rock", "rock",      "paper", "rock",
          "rock", NA,      NA,         "paper", NA)
chm3 <- c("rock", "paper", "scissors", "paper", "scissors",
          "rock", "rock",  NA,         "paper", "scissors")



df1 <- data.frame(y, 
                  c1, c2, c3, 
                  cm1, cm2, cm3, 
                  l1, l2, l3,
                  lm1, lm2, lm3,
                  b1, b2, b3, 
                  bm1, bm2, bm3, 
                  n1, n2, n3,
                  nm1, nm2, nm3,
                  ch1, ch2, ch3,
                  chm1, chm2, chm3)

df1$ch1 <- as.character(ch1)
df1$ch2 <- as.character(ch2)
df1$ch3 <- as.character(ch3)

df1$chm1 <- as.character(chm1)
df1$chm2 <- as.character(chm2)
df1$chm3 <- as.character(chm3)
```

## `row_any_count` Testing and Examples

### Likert Scale Variables

#### Error catching

##### Number of maximum missing values must be an integer. 

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_1 = dgen::row_any_count(l1, l2, l3, 
                                                   values = "1",
                                                   maxmiss_n = 1.3))
```

##### Negative number of maximum missing values is not allowed. 

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_1 = dgen::row_any_count(l1, l2, l3, 
                                                   values = "1",
                                                   maxmiss_n = -2))
```

##### Number of maximum missing values exceeds number of variables. 

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_1 = dgen::row_any_count(l1, l2, l3, 
                                                   values = "1",
                                                   maxmiss_n = 4))
```

#### Likert scale variables with *no* missing data

```{r}
df1 %>%
  dplyr::mutate(count_l_is_1 = dgen::row_any_count(l1, l2, l3, 
                                                   values = "3")) %>% 
  dplyr::select(l1, l2, l3, count_l_is_1)
```


#### Likert scale variables with *non-ignored* missing data 

* maxmiss_n is set to 0. If a case has **no** non-missing values, then a count is returned; otherwise, NA. This is the default.
* 


```{r}
df1 %>% 
  dplyr::mutate(count_lm_is_1 = dgen::row_any_count(lm1, lm2, lm3, 
                                                    values = c("3", "5"), 
                                                    maxmiss_n = 0)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_1) 
```

#### Likert scale variables with *ignored* missing data (unless missing on all variables)

*  There are 3 variables, so maxmiss_n it set to 2. As long as a case has a non-missing value on at least 3 - 2 = 1 variables, then a count is returned.


```{r}
df1 %>% 
  dplyr::mutate(count_lm_is_1 = dgen::row_any_count(lm1, lm2, lm3, 
                                                    values = c("3", "5"), 
                                                    maxmiss_n = 2)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_1) 
```

#### Likert scale variables with *ignored* missing data (even if missing on all variables)

*  There are 3 variables, so maxmiss_n is set to 3. If a case is missing on all 3 variables, a count is still computed.

```{r}
df1 %>% 
  dplyr::mutate(count_lm_is_1 = dgen::row_any_count(lm1, lm2, lm3, 
                                                    values = c("3", "5"), 
                                                    maxmiss_n = 3)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_1) 
```

### Nominal Variables

#### Nominal Variable with *no* missing data

```{r}
df1 %>% dplyr::mutate(count_n_is_cat = dgen::row_any_count(n1, n2, n3, value = "cat")) %>% 
  dplyr::select(n1, n2, n3, count_n_is_cat)
```

#### Nominal Variable with *ignored* missing data (unless missing on all variables)

*  If missing on all variables, then NA.

```{r}
df1 %>% dplyr::mutate(count_nm_is_cat = dgen::row_any_count(nm1, nm2, nm3, value = "cat", ignoreNA = TRUE)) %>% 
  dplyr::select(nm1, nm2, nm3, count_nm_is_cat)
```


#### Nominal Variable with *ignored* missing data (even if missing on all variables)

*  If missing on all variables, still computes a count.
*  It does not matter what option is selected for `ignoreNA`, it is assumed 
to be `TRUE` if `ignoreAllNA` is `TRUE`.

```{r}
df1 %>% dplyr::mutate(count_nm_is_cat = dgen::row_any_count(nm1, nm2, nm3, value = "cat", ignoreAllNA = TRUE)) %>% 
  dplyr::select(nm1, nm2, nm3, count_nm_is_cat)
```


#### Nominal Variable with *non-ignored* missing data

```{r}
df1 %>% dplyr::mutate(count_nm_is_cat = dgen::row_any_count(nm1, nm2, nm3, value = "cat", ignoreNA = FALSE, ignoreallNA = FALSE)) %>% 
  dplyr::select(nm1, nm2, nm3, count_nm_is_cat)
```

### Character Variables

#### Character Variable with *no* missing data

```{r}
df1 %>% dplyr::mutate(count_ch_is_rock = dgen::row_any_count(ch1, ch2, ch3, value = "rock")) %>% 
  dplyr::select(ch1, ch2, ch3, count_ch_is_rock)
```

#### Character Variable with *ignored* missing data (unless missing on all variables)

*  If missing on all variables, then NA.

```{r}
df1 %>% 
  dplyr::mutate(count_chm_is_rock = 
                  dgen::row_any_count(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreNA = TRUE)) %>% 
  dplyr::select(chm1, chm2, chm3, count_chm_is_rock)
```

#### Character Variable with *ignored* missing data (even if missing on all variables)

*  If missing on all variables, still computes a count.
*  It does not matter what option is selected for `ignoreNA`, it is assumed 
to be `TRUE` if `ignoreAllNA` is `TRUE`.

```{r}
df1 %>% 
  dplyr::mutate(count_chm_is_rock = 
                  dgen::row_any_count(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreAllNA = TRUE)) %>% 
  dplyr::select(chm1, chm2, chm3, count_chm_is_rock)
```

#### Character Variable with *non-ignored* missing data 


```{r}
df1 %>% 
  dplyr::mutate(count_chm_is_rock = 
                  dgen::row_any_count(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreNA = FALSE)) %>% 
  dplyr::select(chm1, chm2, chm3, count_chm_is_rock)
```

## `row_greater_count` Testing and Examples

### Likert Scale Variables

#### Error catching

##### Number of maximum missing values must be an integer. 

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_gt_3 = dgen::row_greater_count(l1, l2, l3, 
                                                   value = 3,
                                                   maxmiss_n = 1.3))
```

##### Negative number of maximum missing values is not allowed. 

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_gt_3 = dgen::row_greater_count(l1, 
                                                       l2, 
                                                       l3, 
                                                       value = 3,
                                                       maxmiss_n = -2))
```

##### Number of maximum missing values exceeds number of variables. 

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_gt_3 = dgen::row_greater_count(l1, l2, l3,
                                                       value = 3,
                                                       maxmiss_n = 4))
```

##### Value must be numeric

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_gt_3 = dgen::row_greater_count(l1, l2, l3,
                                                       value = "3",
                                                       maxmiss_n = 2))
```


```{r}
df1 %>% 
  dplyr::mutate(count_l_is_gt_3 = dgen::row_greater_count(l1, l2, l3,
                                                       value = "dog",
                                                       maxmiss_n = 2))
```

#### Likert scale variables with *no* missing data

```{r}
df1 %>%
  dplyr::mutate(count_l_is_gt_3 = dgen::row_greater_count(l1, l2, l3,
                                                       value = 3)) %>% 
  dplyr::select(l1, l2, l3, count_l_is_gt_3)
```


#### Likert scale variables with *non-ignored* missing data 

* maxmiss_n is set to 0. If a case has **no** non-missing values, then a count is returned; otherwise, NA. This is the default.


```{r}
df1 %>% 
  dplyr::mutate(count_lm_is_gt_3 = dgen::row_greater_count(lm1, lm2, lm3, 
                                                    value = 3, 
                                                    maxmiss_n = 0)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_gt_3) 
```

#### Likert scale variables with *ignored* missing data (unless missing on all variables)

*  There are 3 variables, so maxmiss_n it set to 2. As long as a case has a non-missing value on at least 3 - 2 = 1 variables, then a count is returned.


```{r}
df1 %>% 
  dplyr::mutate(count_lm_is_gt_3 = dgen::row_greater_count(lm1, lm2, lm3, 
                                                    value = 3, 
                                                    maxmiss_n = 2)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_gt_3) 
```

#### Likert scale variables with *ignored* missing data (even if missing on all variables)

*  There are 3 variables, so maxmiss_n is set to 3. If a case is missing on all 3 variables, a count is still computed.

```{r}
df1 %>% 
  dplyr::mutate(count_lm_is_gt_3 = dgen::row_greater_count(lm1, lm2, lm3, 
                                                    value = 3, 
                                                    maxmiss_n = 3)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_gt_3) 
```




## `row_less_count` Testing and Examples

### Likert Scale Variables

#### Error catching

##### Number of maximum missing values must be an integer. 

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_lt_5 = dgen::row_less_count(l1, l2, l3, 
                                                   value = 5,
                                                   maxmiss_n = 1.3))
```

##### Negative number of maximum missing values is not allowed. 

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_lt_5 = dgen::row_less_count(l1, 
                                                       l2, 
                                                       l3, 
                                                       value = 5,
                                                       maxmiss_n = -2))
```

##### Number of maximum missing values exceeds number of variables. 

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_lt_5 = dgen::row_less_count(l1, l2, l3,
                                                       value = 5,
                                                       maxmiss_n = 4))
```

##### Value must be numeric

```{r}
df1 %>% 
  dplyr::mutate(count_l_is_lt_5 = dgen::row_less_count(l1, l2, l3,
                                                       value = "5",
                                                       maxmiss_n = 2))
```


```{r}
df1 %>% 
  dplyr::mutate(count_l_is_lt_5 = dgen::row_less_count(l1, l2, l3,
                                                       value = "dog",
                                                       maxmiss_n = 2))
```

#### Likert scale variables with *no* missing data

```{r}
df1 %>%
  dplyr::mutate(count_l_is_lt_5 = dgen::row_less_count(l1, l2, l3,
                                                       value = 5)) %>% 
  dplyr::select(l1, l2, l3, count_l_is_lt_5)
```


#### Likert scale variables with *non-ignored* missing data 

* maxmiss_n is set to 0. If a case has **no** non-missing values, then a count is returned; otherwise, NA. This is the default.


```{r}
df1 %>% 
  dplyr::mutate(count_lm_is_lt_5 = dgen::row_less_count(lm1, lm2, lm3, 
                                                    value = 5, 
                                                    maxmiss_n = 0)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_lt_5) 
```

#### Likert scale variables with *ignored* missing data (unless missing on all variables)

*  There are 3 variables, so maxmiss_n it set to 2. As long as a case has a non-missing value on at least 3 - 2 = 1 variables, then a count is returned.


```{r}
df1 %>% 
  dplyr::mutate(count_lm_is_lt_5 = dgen::row_less_count(lm1, lm2, lm3, 
                                                    value = 5, 
                                                    maxmiss_n = 2)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_lt_5) 
```

#### Likert scale variables with *ignored* missing data (even if missing on all variables)

*  There are 3 variables, so maxmiss_n is set to 3. If a case is missing on all 3 variables, a count is still computed.

```{r}
df1 %>% 
  dplyr::mutate(count_lm_is_lt_5 = dgen::row_less_count(lm1, lm2, lm3, 
                                                    value = 5, 
                                                    maxmiss_n = 3)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_lt_5) 
```






## `row_any_match` Examples

### Character Variables

#### Character Variable with *no* missing data

```{r}
df1 %>% 
  dplyr::mutate(anymatch_ch_is_rock = dgen::row_any_match(ch1, 
                                                          ch2, 
                                                          ch3, 
                                                          values = "rock")) %>% 
  dplyr::select(ch1, 
                ch2, 
                ch3, 
                anymatch_ch_is_rock)
```

#### Character Variable with *ignored* missing data (unless missing on all variables)

*  If missing on all variables, then NA.

```{r}
df1 %>% 
  dplyr::mutate(anymatch_ch_is_rock = dgen::row_any_match(chm1,
                                                          chm2, 
                                                          chm3, 
                                                          value = "rock", 
                                                          maxmiss_n = 2)) %>% 
  dplyr::select(chm1, 
                chm2, 
                chm3, 
                anymatch_ch_is_rock)
```

#### Character Variable with *ignored* missing data (even if missing on all variables)

*  If missing on all variables, still computes a count.
*  It does not matter what option is selected for `ignoreNA`, it is assumed 
to be `TRUE` if `ignoreAllNA` is `TRUE`.

```{r}
df1 %>% 
  dplyr::mutate(anymatch_ch_is_rock = dgen::row_any_match(chm1,
                                                          chm2, 
                                                          chm3, 
                                                          value = "rock", 
                                                          maxmiss_n = 3)) %>% 
  dplyr::select(chm1, 
                chm2, 
                chm3, 
                anymatch_ch_is_rock)
```

#### Character Variable with *non-ignored* missing data 


```{r}
df1 %>% 
  dplyr::mutate(anymatch_ch_is_rock = 
                  dgen::row_any_match(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreNA = FALSE)) %>% 
  dplyr::select(chm1, chm2, chm3, anymatch_ch_is_rock)
```

### Binary Variables

#### Binary Variable with *no* missing data

```{r}
df1 %>% dplyr::mutate(anymatch_b_is_1 = dgen::row_any_match(b1, b2, b3, value = "1")) %>% 
  dplyr::select(b1, b2, b3, anymatch_b_is_1)
```

#### Binary Variable with *ignored* missing data (unless missing on all variables)

*  If missing on all variables, then NA.

```{r}
df1 %>% 
  dplyr::mutate(anymatch_b_is_1 = 
                  dgen::row_any_match(bm1, bm2, bm3, 
                                      value = "1", 
                                      ignoreNA = TRUE)) %>% 
  dplyr::select(bm1, bm2, bm3, anymatch_b_is_1)
```

#### Binary Variable with *ignored* missing data (even if missing on all variables)

*  If missing on all variables, still returns a value.
*  It does not matter what option is selected for `ignoreNA`, it is assumed 
to be `TRUE` if `ignoreAllNA` is `TRUE`.

```{r}
df1 %>% 
  dplyr::mutate(anymatch_b_is_1 = 
                  dgen::row_any_match(bm1, bm2, bm3, 
                                      value = "1", 
                                      ignoreAllNA = TRUE)) %>% 
  dplyr::select(bm1, bm2, bm3, anymatch_b_is_1)
```

#### Binary Variable with *non-ignored* missing data 


```{r}
df1 %>% 
  dplyr::mutate(anymatch_b_is_1 = 
                  dgen::row_any_match(bm1, bm2, bm3, 
                                      value = "1", 
                                      ignoreNA = FALSE)) %>% 
  dplyr::select(bm1, bm2, bm3, anymatch_b_is_1)
```













## Testing of row_mean


### Likert Scale Variables

#### Error catching

##### Number of maximum missing values must be an integer. 

```{r}
df1 %>% 
  dplyr::mutate(mean_l = dgen::row_mean(l1, l2, l3,
                                        maxmiss_n = 1.3))
```

##### Negative number of maximum missing values is not allowed. 

```{r}
df1 %>% 
  dplyr::mutate(mean_l = dgen::row_mean(l1, l2, l3,
                                        maxmiss_n = -2))
```

##### Number of maximum missing values exceeds number of variables. 

```{r}
df1 %>% 
  dplyr::mutate(mean_l = dgen::row_mean(l1, l2, l3,
                                        maxmiss_n = 4))
```

##### Number of maximum missing values equals number of variables. 

```{r}
df1 %>% 
  dplyr::mutate(mean_l = dgen::row_mean(l1, l2, l3,
                                        maxmiss_n = 3))
```

#### Likert scale variables with *no* missing data

```{r}
df1 %>% 
  dplyr::mutate(mean_l = dgen::row_mean(l1, l2, l3)) %>% 
  dplyr::select(l1, l2, l3, mean_l)
```


#### Likert scale variables with *non-ignored* missing data 

* maxmiss_n is set to 0. If a case has **no** non-missing values, then the mean is calculated; otherwise, NA. This is the default.


```{r}
df1 %>% 
  dplyr::mutate(mean_lm = dgen::row_mean(lm1, lm2, lm3,
                                         maxmiss_n = 0)) %>% 
  dplyr::select(lm1, lm2, lm3, mean_lm)

```

#### Likert scale variables with *ignored* missing data (unless missing on all variables)

*  There are 3 variables, so maxmiss_n it set to 2. As long as a case has a non-missing value on at least 3 - 2 = 1 variables, then the mean is calculated.


```{r}
df1 %>% 
  dplyr::mutate(mean_lm = dgen::row_mean(lm1, lm2, lm3,
                                         maxmiss_n = 2)) %>% 
  dplyr::select(lm1, lm2, lm3, mean_lm)
```


Row sum needs an option for treating missing as 0.

