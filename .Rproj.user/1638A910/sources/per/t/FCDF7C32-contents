---
title: "R Notebook"
output: html_notebook
---

# Overview of dgen
    

# Testing of dgen

## Setup
```{r}
library(tidyverse)
```

## Sample Dataset

```{r}
# Continuous Outcome
y  <- rnorm(1000)

# Continuous predictors with and without missing data
c1  <- runif(1000)
c2  <- runif(1000)
c3  <- runif(1000)

cm1 <- runif(1000)
  cm1[sample.int(length(cm1), 100)] <- NA_real_
cm2 <- runif(1000)
  cm2[sample.int(length(cm2), 100)] <- NA_real_
cm3 <- runif(1000)
  cm3[sample.int(length(cm3), 100)] <- NA_real_

  
# Likert predictor with and without missing data
l1 <- sample(c(1,2,3,4,5,6,7), 1000, replace = TRUE)
l2 <- sample(c(1,2,3,4,5,6,7), 1000, replace = TRUE)
l3 <- sample(c(1,2,3,4,5,6,7), 1000, replace = TRUE)

lm1 <- sample(c(1,2,3,4,5,6,7, NA), 1000, replace = TRUE)
lm2 <- sample(c(1,2,3,4,5,6,7, NA), 1000, replace = TRUE)
lm3 <- sample(c(1,2,3,4,5,6,7, NA), 1000, replace = TRUE)
  
# Binary predictors with and without missing data  
b1  <- factor(sample(c(0,1), 1000, replace=TRUE))
b2  <- factor(sample(c(0,1), 1000, replace=TRUE))
b3  <- factor(sample(c(0,1), 1000, replace=TRUE))

bm1  <- factor(sample(c(0,1, NA), 1000, replace=TRUE))
bm2  <- factor(sample(c(0,1, NA), 1000, replace=TRUE))
bm3  <- factor(sample(c(0,1, NA), 1000, replace=TRUE))

# Nominal predictors with and without missing data
n1  <- factor(sample(c("cat", "dog", "mouse"), 1000, replace=TRUE))
n2  <- factor(sample(c("cat", "dog", "mouse"), 1000, replace=TRUE))
n3  <- factor(sample(c("cat", "dog", "mouse"), 1000, replace=TRUE))

nm1  <- factor(sample(c("cat", "dog", "mouse", NA), 1000, replace=TRUE))
nm2  <- factor(sample(c("cat", "dog", "mouse", NA), 1000, replace=TRUE))
nm3  <- factor(sample(c("cat", "dog", "mouse", NA), 1000, replace=TRUE))

# Character with and without missing data
ch1  <- sample(c("rock", "paper", "scissors"), 1000, replace=TRUE)
ch1  <- as.character(ch1)
ch2  <- sample(c("rock", "paper", "scissors"), 1000, replace=TRUE)
ch3  <- sample(c("rock", "paper", "scissors"), 1000, replace=TRUE)

chm1  <- sample(c("rock", "paper", "scissors", NA), 1000, replace=TRUE)
chm2  <- sample(c("rock", "paper", "scissors", NA), 1000, replace=TRUE)
chm3  <- sample(c("rock", "paper", "scissors", NA), 1000, replace=TRUE)

df1 <- data.frame(y, 
                  c1, c2, c3, 
                  cm1, cm2, cm3, 
                  l1, l2, l3,
                  lm1, lm2, lm3,
                  b1, b2, b3, 
                  bm1, bm2, bm3, 
                  n1, n2, n3,
                  nm1, nm2, nm3,
                  ch1, ch2, ch3,
                  chm1, chm2, chm3)

df1$ch1 <- as.character(ch1)
df1$ch2 <- as.character(ch2)
df1$ch3 <- as.character(ch3)

df1$chm1 <- as.character(chm1)
df1$chm2 <- as.character(chm2)
df1$chm3 <- as.character(chm3)
```

## `row_any_count` Examples

### Likert Scale Variables

#### Likert scale variables with *no* missing data

```{r}
df1 %>% dplyr::mutate(count_l_is_1 = dgen::row_any_count(l1, l2, l3, value = "1")) %>% 
  dplyr::select(l1, l2, l3, count_l_is_1)
```

#### Likert scale variables with *ignored* missing data (unless missing on all variables)

*  If missing on all variables, then NA.


```{r}
df1 %>% dplyr::mutate(count_lm_is_1 = dgen::row_any_count(lm1, lm2, lm3, value = "1", ignoreNA = TRUE)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_1)
```

#### Likert scale variables with *ignored* missing data (even if missing on all variables)

*  If missing on all variables, still computes a count.
*  It does not matter what option is selected for `ignoreNA`, it is assumed 
to be `TRUE` if `ignoreAllNA` is `TRUE`.

```{r}
df1 %>% dplyr::mutate(count_lm_is_1 = dgen::row_any_count(lm1, lm2, lm3, value = "1", ignoreNA = TRUE, ignoreAllNA = TRUE)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_1)
```

#### Likert scale variables with *non-ignored* missing data


```{r}
df1 %>% dplyr::mutate(count_lm_is_1 = dgen::row_any_count(lm1, lm2, lm3, value = "1", ignoreNA = FALSE)) %>% 
  dplyr::select(lm1, lm2, lm3, count_lm_is_1)
```


### Nominal Variables

#### Nominal Variable with *no* missing data

```{r}
df1 %>% dplyr::mutate(count_n_is_cat = dgen::row_any_count(n1, n2, n3, value = "cat")) %>% 
  dplyr::select(n1, n2, n3, count_n_is_cat)
```

#### Nominal Variable with *ignored* missing data (unless missing on all variables)

*  If missing on all variables, then NA.

```{r}
df1 %>% dplyr::mutate(count_nm_is_cat = dgen::row_any_count(nm1, nm2, nm3, value = "cat", ignoreNA = TRUE)) %>% 
  dplyr::select(nm1, nm2, nm3, count_nm_is_cat)
```


#### Nominal Variable with *ignored* missing data (even if missing on all variables)

*  If missing on all variables, still computes a count.
*  It does not matter what option is selected for `ignoreNA`, it is assumed 
to be `TRUE` if `ignoreAllNA` is `TRUE`.

```{r}
df1 %>% dplyr::mutate(count_nm_is_cat = dgen::row_any_count(nm1, nm2, nm3, value = "cat", ignoreAllNA = TRUE)) %>% 
  dplyr::select(nm1, nm2, nm3, count_nm_is_cat)
```


#### Nominal Variable with *non-ignored* missing data

```{r}
df1 %>% dplyr::mutate(count_nm_is_cat = dgen::row_any_count(nm1, nm2, nm3, value = "cat", ignoreNA = FALSE, ignoreallNA = FALSE)) %>% 
  dplyr::select(nm1, nm2, nm3, count_nm_is_cat)
```

### Character Variables

#### Character Variable with *no* missing data

```{r}
df1 %>% dplyr::mutate(count_ch_is_rock = dgen::row_any_count(ch1, ch2, ch3, value = "rock")) %>% 
  dplyr::select(ch1, ch2, ch3, count_ch_is_rock)
```

#### Character Variable with *ignored* missing data (unless missing on all variables)

*  If missing on all variables, then NA.

```{r}
df1 %>% 
  dplyr::mutate(count_chm_is_rock = 
                  dgen::row_any_count(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreNA = TRUE)) %>% 
  dplyr::select(chm1, chm2, chm3, count_chm_is_rock)
```

#### Character Variable with *ignored* missing data (even if missing on all variables)

*  If missing on all variables, still computes a count.
*  It does not matter what option is selected for `ignoreNA`, it is assumed 
to be `TRUE` if `ignoreAllNA` is `TRUE`.

```{r}
df1 %>% 
  dplyr::mutate(count_chm_is_rock = 
                  dgen::row_any_count(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreAllNA = TRUE)) %>% 
  dplyr::select(chm1, chm2, chm3, count_chm_is_rock)
```

#### Character Variable with *non-ignored* missing data 


```{r}
df1 %>% 
  dplyr::mutate(count_chm_is_rock = 
                  dgen::row_any_count(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreNA = FALSE)) %>% 
  dplyr::select(chm1, chm2, chm3, count_chm_is_rock)
```

## `row_any_match` Examples

### Character Variables

#### Character Variable with *no* missing data

```{r}
df1 %>% dplyr::mutate(anymatch_ch_is_rock = dgen::row_any_match(ch1, ch2, ch3, value = "rock")) %>% 
  dplyr::select(ch1, ch2, ch3, anymatch_ch_is_rock)
```

#### Character Variable with *ignored* missing data (unless missing on all variables)

*  If missing on all variables, then NA.

```{r}
df1 %>% 
  dplyr::mutate(anymatch_ch_is_rock = 
                  dgen::row_any_match(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreNA = TRUE)) %>% 
  dplyr::select(chm1, chm2, chm3, anymatch_ch_is_rock)
```

#### Character Variable with *ignored* missing data (even if missing on all variables)

*  If missing on all variables, still computes a count.
*  It does not matter what option is selected for `ignoreNA`, it is assumed 
to be `TRUE` if `ignoreAllNA` is `TRUE`.

```{r}
df1 %>% 
  dplyr::mutate(anymatch_ch_is_rock = 
                  dgen::row_any_match(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreAllNA = TRUE)) %>% 
  dplyr::select(chm1, chm2, chm3, anymatch_ch_is_rock)
```

#### Character Variable with *non-ignored* missing data 


```{r}
df1 %>% 
  dplyr::mutate(anymatch_ch_is_rock = 
                  dgen::row_any_match(chm1, chm2, chm3, 
                                      value = "rock", 
                                      ignoreNA = FALSE)) %>% 
  dplyr::select(chm1, chm2, chm3, anymatch_ch_is_rock)
```

### Binary Variables

#### Binary Variable with *no* missing data

```{r}
df1 %>% dplyr::mutate(anymatch_b_is_1 = dgen::row_any_match(b1, b2, b3, value = "1")) %>% 
  dplyr::select(b1, b2, b3, anymatch_b_is_1)
```

#### Binary Variable with *ignored* missing data (unless missing on all variables)

*  If missing on all variables, then NA.

```{r}
df1 %>% 
  dplyr::mutate(anymatch_b_is_1 = 
                  dgen::row_any_match(bm1, bm2, bm3, 
                                      value = "1", 
                                      ignoreNA = TRUE)) %>% 
  dplyr::select(bm1, bm2, bm3, anymatch_b_is_1)
```

#### Binary Variable with *ignored* missing data (even if missing on all variables)

*  If missing on all variables, still returns a value.
*  It does not matter what option is selected for `ignoreNA`, it is assumed 
to be `TRUE` if `ignoreAllNA` is `TRUE`.

```{r}
df1 %>% 
  dplyr::mutate(anymatch_b_is_1 = 
                  dgen::row_any_match(bm1, bm2, bm3, 
                                      value = "1", 
                                      ignoreAllNA = TRUE)) %>% 
  dplyr::select(bm1, bm2, bm3, anymatch_b_is_1)
```

#### Binary Variable with *non-ignored* missing data 


```{r}
df1 %>% 
  dplyr::mutate(anymatch_b_is_1 = 
                  dgen::row_any_match(bm1, bm2, bm3, 
                                      value = "1", 
                                      ignoreNA = FALSE)) %>% 
  dplyr::select(bm1, bm2, bm3, anymatch_b_is_1)
```













## Testing of row_means

```{r}
df1 %>% 
  dplyr::select(lm1, lm2, lm3) %>% 
  dplyr::mutate(lm_mean = dgen::row_means(lm1, lm2, lm3, n = 1))
```

